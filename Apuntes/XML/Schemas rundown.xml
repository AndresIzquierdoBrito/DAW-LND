Define the XML Schema namespace:
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

Define an element:
<xs:element name="elementName" type="dataType" />

Define an empty element:
<xs:element name="elementName" type="xs:empty" />

Define a complex type:
<xs:complexType name="complexTypeName">
xs:sequence
<xs:element name="childElementName" type="dataType" minOccurs="0" maxOccurs="unbounded" />
</xs:sequence>
<xs:attribute name="attributeName" type="attributeType" />
</xs:complexType>

Define a simple type:
<xs:simpleType name="simpleTypeName">
<xs:restriction base="baseDataType">
<xs:enumeration value="value1" />
<xs:enumeration value="value2" />
</xs:restriction>
</xs:simpleType>

Define an attribute:
<xs:attribute name="attributeName" type="attributeType" use="required" />

xs:sequence
<xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax" />
</xs:sequence>
</xs:complexType>

<!-- Patterns: -->
Patterns are used to specify a regular expression that the value of an element or attribute must match.
The pattern is defined using the xs:pattern element inside a xs:simpleType declaration.
Example: <xs:pattern value="[A-Z]{3}-[0-9]{3}" />

Restrictions:
Restrictions are used to define constraints on a data type.
Restrictions are defined using the xs:restriction element inside a xs:simpleType declaration.
Example: <xs:restriction base="xs:string"><xs:maxLength value="10" /></xs:restriction>

<!-- Facets: -->
Facets are used to specify constraints on a data type, such as minimum and maximum values.
Facets are defined using the xs:minInclusive, xs:maxInclusive, xs:minExclusive, and xs:maxExclusive elements inside a xs:restriction declaration.
Example: <xs:restriction base="xs:int"><xs:minInclusive value="0" /><xs:maxExclusive value="100" /></xs:restriction>

<!-- Enumeration: -->
Enumeration is used to define a set of allowed values for a data type.
Enumeration is defined using the xs:enumeration element inside a xs:simpleType declaration.
Example: <xs:simpleType name="color"><xs:restriction base="xs:string"><xs:enumeration value="red" /><xs:enumeration value="green" /><xs:enumeration value="blue" /></xs:restriction></xs:simpleType>

<!-- Union: -->
Union is used to combine multiple data types into a single type.
Union is defined using the xs:union element inside a xs:simpleType declaration.
Example: <xs:simpleType name="year"><xs:union memberTypes="xs:gYear xs:gYearMonth" /></xs:simpleType>

<!-- Complex content: -->
Complex content allows elements to have mixed content (text and child elements).
Complex content is defined using the xs:complexContent element inside a xs:complexType declaration.
Example: <xs:complexType name="person">xs:complexContent<xs:extension base="xs:string"><xs:attribute name="age" type="xs:int" /></xs:extension></xs:complexContent></xs:complexType>


<!-- Complex types: -->
Complex types are used to define elements with child elements and/or attributes.
Complex types are defined using the xs:complexType element.
Example: <xs:complexType name="person">xs:sequence<xs:element name="name" type="xs:string" /><xs:element name="age" type="xs:int" /></xs:sequence></xs:complexType>